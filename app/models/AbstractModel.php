<?php


namespace PHPMVC\Models;

use PHPMVC\database\AbstractDB;

class AbstractModel extends AbstractDB implements ModelInterface
{
    private static $instance;
    /**
     * AbstractModel constructor.
     */
    public static function tableName()
    {
        $table = explode('\\' ,get_called_class());
        $count = count($table);
        $table = strtolower($table[$count-1]);
        return $table;
    }

    public static function all()
    {
        // TODO: Implement getAll() method.
        self::select(self::tableName());
        return self::fetchAll();
    }
    public  function get()
    {
        // TODO: Implement getAll() method.
        return self::fetchAll();
    }

    public static function find($id)
    {
        // TODO: Implement find() method.
        self::select(self::tableName(),$id);
        return self::fetchRow();
    }

    public static function where($column, $value)
    {
        // TODO: Implement where() method.
        self::select(self::tableName(),  $column .'='. $value);
        if (!self::$instance) {
            self::$instance = new AbstractModel();
        }
        return self::$instance;
    }

    public static function orderBy($column, $order = 'ASC')
    {
        // TODO: Implement orderBy() method.
        self::select(self::tableName(),'','*', "'". $column .' '. $order . "'");
        if (!self::$instance) {
            self::$instance = new AbstractModel();
        }
        return self::$instance;

    }

    public static function limit($limit, $offset = null)
    {
        // TODO: Implement limit() method.
        self::select(self::tableName(), '','*','',$limit, $offset);
        if (!self::$instance) {
            self::$instance = new AbstractModel();
        }
        return self::$instance;
    }

    public static function like($like)
    {
        // TODO: Implement like() method.
        self::select(self::tableName(),'','*','',null,null,$like);
        if (!self::$instance) {
            self::$instance = new AbstractModel();
        }
        return self::$instance;
    }

    public static function create($data)
    {
        // TODO: Implement create() method.
        self::insert(self::tableName(), $data);
    }

    public static function update($data , $id)
    {
        // TODO: Implement update() method.
        self::_update(self::tableName(), $data, 'id = '. $id);
    }

    public static function delete($id)
    {
        // TODO: Implement delete() method.
        self::_delete(self::tableName(),  'id = '. $id);
    }
    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}